//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 9/5/2023 5:26:48 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WsmSystem.Erp.Core.Entities
{
    public partial class EntityFrameworkUnitOfWork : IUnitOfWork
    {
        protected DbContext context = null;

        IRepository<ApplicationInfo> _ApplicationInfos;

        IRepository<BaseLanguage> _BaseLanguages;

        IRepository<ClientInfo> _ClientInfos;

        IRepository<PhraseTag> _PhraseTags;

        IRepository<PhraseTagTranslation> _PhraseTagTranslations;

        IRepository<ItemCategory> _ItemCategories;

        IRepository<ItemGroup> _ItemGroups;

        IRepository<ItemGroupTranslation> _ItemGroupTranslations;

        IRepository<ItemMaster> _ItemMasters;

        IRepository<Uom> _Uoms;

        public EntityFrameworkUnitOfWork()
            : this(new WsmSystem.Erp.Infrastructure.Data.Storage())
        {
        }

        public EntityFrameworkUnitOfWork(DbContext context)
        {
            if (context == null)
            {
                throw new ArgumentNullException("context");
            }
            this.context = context;
        }

        public DbContext Context
        {
            get
            {
                return context;
            }
        }

        protected virtual void CloseContext()
        {
            if (context != null)
            {
                context.Dispose();
                context = null;
            }
        }

        #region IDisposable Methods

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    CloseContext();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion

        #region IUnitOfWork Members

        public IRepository<ApplicationInfo> ApplicationInfos {
          get {
            if (_ApplicationInfos == null)
              _ApplicationInfos = new EntityFrameworkRepository<ApplicationInfo>(context);
            return _ApplicationInfos;
          }
        }

        public IRepository<BaseLanguage> BaseLanguages {
          get {
            if (_BaseLanguages == null)
              _BaseLanguages = new EntityFrameworkRepository<BaseLanguage>(context);
            return _BaseLanguages;
          }
        }

        public IRepository<ClientInfo> ClientInfos {
          get {
            if (_ClientInfos == null)
              _ClientInfos = new EntityFrameworkRepository<ClientInfo>(context);
            return _ClientInfos;
          }
        }

        public IRepository<PhraseTag> PhraseTags {
          get {
            if (_PhraseTags == null)
              _PhraseTags = new EntityFrameworkRepository<PhraseTag>(context);
            return _PhraseTags;
          }
        }

        public IRepository<PhraseTagTranslation> PhraseTagTranslations {
          get {
            if (_PhraseTagTranslations == null)
              _PhraseTagTranslations = new EntityFrameworkRepository<PhraseTagTranslation>(context);
            return _PhraseTagTranslations;
          }
        }

        public IRepository<ItemCategory> ItemCategories {
          get {
            if (_ItemCategories == null)
              _ItemCategories = new EntityFrameworkRepository<ItemCategory>(context);
            return _ItemCategories;
          }
        }

        public IRepository<ItemGroup> ItemGroups {
          get {
            if (_ItemGroups == null)
              _ItemGroups = new EntityFrameworkRepository<ItemGroup>(context);
            return _ItemGroups;
          }
        }

        public IRepository<ItemGroupTranslation> ItemGroupTranslations {
          get {
            if (_ItemGroupTranslations == null)
              _ItemGroupTranslations = new EntityFrameworkRepository<ItemGroupTranslation>(context);
            return _ItemGroupTranslations;
          }
        }

        public IRepository<ItemMaster> ItemMasters {
          get {
            if (_ItemMasters == null)
              _ItemMasters = new EntityFrameworkRepository<ItemMaster>(context);
            return _ItemMasters;
          }
        }

        public IRepository<Uom> Uoms {
          get {
            if (_Uoms == null)
              _Uoms = new EntityFrameworkRepository<Uom>(context);
            return _Uoms;
          }
        }

        public virtual void Save()
        {
            if (context == null)
                throw new InvalidOperationException("Context has not been initialized.");
            context.SaveChanges();
        }

        #endregion
    }
}
